/*Adapted from a query by Jeremy Goldstein of the Minuteman Library Network */

DROP TABLE IF EXISTS patrons;
CREATE TEMP TABLE patrons AS

SELECT
--id here is just used to allow the join in the main query below
p.id,
n.last_name AS name,
p.barcode,
--cast as money to make the formatting just a bit nicer
p.owed_amt::MONEY

FROM
sierra_view.patron_view p
JOIN
sierra_view.patron_record_fullname n
ON
p.id = n.patron_record_id

--limit patrons to institutions
WHERE p.ptype_code = '197' AND
p.owed_amt > '3.00' 
;

SELECT
f.invoice_num,
p.name,
a.addr1,
a.addr2,
a.city ||', '||a.region||' '|| a.postal_code AS city_state_zip,

f.charge_location_code AS owning_location,
f.assessed_gmt::DATE AS assessed_date,
SUBSTRING(f.title, 1, 65),
i.call_number_norm AS call_number,
i.barcode AS barcode,

--labels for the charge codes in the fine table do not exist so I'm using a case statement to plug them in according to the sierradna documentation
CASE
WHEN f.charge_code = '1' THEN 'manual charge'
WHEN f.charge_code = '2' THEN 'overdue'
WHEN f.charge_code = '3' THEN 'replacement'
WHEN f.charge_code = '4' THEN 'adjustment (overduex)'
WHEN f.charge_code = '5' THEN 'lost book'
WHEN f.charge_code = '6' THEN 'overdue renewed'
WHEN f.charge_code = '7' THEN 'rental'
WHEN f.charge_code = '8' THEN 'rental adjustment (rentalx)'
WHEN f.charge_code = '9' THEN 'debit'
WHEN f.charge_code = 'a' THEN 'notice'
WHEN f.charge_code = 'b' THEN 'credit card'
WHEN f.charge_code = 'p' THEN 'program'
END AS charge_type,
f.item_charge_amt::money AS item_owed

FROM
--pulling from the temp table created above
patrons p
JOIN
sierra_view.fine f
ON
p.id = f.patron_record_id
JOIN
sierra_view.item_record_property i
ON
f.item_record_metadata_id = i.item_record_id
JOIN
sierra_view.patron_record_address a
ON
p.id = a.patron_record_id
WHERE

f.charge_location_code NOT LIKE 'p%' AND
f.charge_code <> '4' AND
f.charge_code <> '2' AND
--f.assessed_gmt::DATE < '2021-03-03'

extract(epoch from f.assessed_gmt) < extract(epoch from current_date) - 5184000 --minux 60 days (Unix time)
ORDER BY owning_location ASC

;
